import axiosInstance from "../ConsumoAdmin/axios.js"

class PerfilClienteService {
  // ============================================
  // üîπ 1. INFORMACI√ìN PERSONAL DEL USUARIO
  // ============================================

  // Obtener informaci√≥n personal del usuario autenticado
  async getMyProfile() {
    try {
      const response = await axiosInstance.get("/profile/me")
      return response.data
    } catch (error) {
      console.error("Error al obtener perfil:", error)
      throw error
    }
  }

  // Actualizar informaci√≥n personal del usuario
async updateMyProfile(profileData, photoFile = null) {
  try {
    const formData = new FormData()

    // Agregar datos del perfil
    Object.keys(profileData).forEach((key) => {
      if (profileData[key] !== null && profileData[key] !== undefined) {
        formData.append(key, profileData[key])  // ‚Üê ESTA L√çNEA
      }
    })

      // Agregar foto si existe
      if (photoFile) {
        formData.append("foto", photoFile)
      }

      const response = await axiosInstance.put("/profile/me", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      })
      return response.data
    } catch (error) {
      console.error("Error al actualizar perfil:", error)
      throw error
    }
  }

  // Actualizar solo la foto del usuario
  async updateMyPhoto(photoFile) {
    try {
      const formData = new FormData()
      formData.append("foto", photoFile)

      const response = await axiosInstance.put("/profile/me/photo", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      })
      return response.data
    } catch (error) {
      console.error("Error al actualizar foto:", error)
      throw error
    }
  }

  // Cambiar contrase√±a del usuario
  async changePassword(passwordData) {
    try {
      // ‚úÖ Mapear correctamente los nombres de campos
      const formattedData = {
        currentPassword: passwordData.oldPassword, // ‚úÖ Mapear oldPassword -> currentPassword
        newPassword: passwordData.newPassword, // ‚úÖ Este ya est√° correcto
      }

      const response = await axiosInstance.patch("/profile/me/password", formattedData)
      return response.data
    } catch (error) {
      console.error("Error al cambiar contrase√±a:", error)
      throw error
    }
  }

  // ============================================
  // üîπ 2. MIS MASCOTAS
  // ============================================

  // Obtener todas las mascotas del cliente autenticado
  async getMyPets() {
    try {
      const response = await axiosInstance.get("/profile/me/pets")
      return response.data
    } catch (error) {
      console.error("Error al obtener mascotas:", error)
      throw error
    }
  }

  // Obtener una mascota espec√≠fica del cliente
  async getMyPet(petId) {
    try {
      const response = await axiosInstance.get(`/profile/me/pets/${petId}`)
      return response.data
    } catch (error) {
      console.error("Error al obtener mascota:", error)
      throw error
    }
  }

  // ‚úÖ CORREGIDO: Crear una nueva mascota (SIN photoFile ya que usamos JSON)
  async createMyPet(petData) {
    try {
      // ‚úÖ USAR JSON DIRECTO COMO EN ADMIN
      const mascotaFormateada = {
        Nombre: petData.nombre,
        IdEspecie: Number.parseInt(petData.idEspecie, 10),
        Raza: petData.raza,
        Tama√±o: petData.tama√±o || "Peque√±o",
        FechaNacimiento: petData.fechaNacimiento,
        Estado: 1,
        Foto: petData.foto || null,
      }

      const response = await axiosInstance.post("/profile/me/pets", mascotaFormateada, {
        headers: {
          "Content-Type": "application/json",
        },
      })
      return response.data
    } catch (error) {
      console.error("Error al crear mascota:", error)
      throw error
    }
  }

  // ‚úÖ CORREGIDO: Actualizar una mascota (SIN photoFile ya que usamos JSON)
  async updateMyPet(petId, petData) {
    try {
      // ‚úÖ USAR JSON DIRECTO COMO EN ADMIN
      const mascotaFormateada = {
        Nombre: petData.nombre,
        IdEspecie: Number.parseInt(petData.idEspecie, 10),
        Raza: petData.raza,
        Tama√±o: petData.tama√±o || "Peque√±o",
        FechaNacimiento: petData.fechaNacimiento,
        Estado: 1,
        Foto: petData.foto || null,
      }

      const response = await axiosInstance.put(`/profile/me/pets/${petId}`, mascotaFormateada, {
        headers: {
          "Content-Type": "application/json",
        },
      })
      return response.data
    } catch (error) {
      console.error("Error al actualizar mascota:", error)
      throw error
    }
  }

  // Obtener especies disponibles (para formularios)
  async getSpecies() {
    try {
      const response = await axiosInstance.get("/profile/me/especies")
      return response.data
    } catch (error) {
      console.error("Error al obtener especies:", error)
      throw error
    }
  }

  // ============================================
  // üîπ 3. MIS PEDIDOS/√ìRDENES
  // ============================================

  // Obtener todos los pedidos del cliente autenticado
  async getMyOrders() {
    try {
      const response = await axiosInstance.get("/profile/me/orders")
      return response.data
    } catch (error) {
      console.error("Error al obtener pedidos:", error)
      throw error
    }
  }

  // Obtener un pedido espec√≠fico del cliente
  async getMyOrder(orderId) {
    try {
      const response = await axiosInstance.get(`/profile/me/orders/${orderId}`)
      return response.data
    } catch (error) {
      console.error("Error al obtener pedido:", error)
      throw error
    }
  }

  // Cancelar un pedido del cliente (solo si est√° en estado "Efectiva")
  async cancelMyOrder(orderId) {
    try {
      const response = await axiosInstance.patch(`/profile/me/orders/${orderId}/cancel`)
      return response.data
    } catch (error) {
      console.error("Error al cancelar pedido:", error)
      throw error
    }
  }

  // ============================================
  // üîπ 4. MIS CITAS
  // ============================================

  // Obtener todas las citas del cliente autenticado
  async getMyAppointments() {
    try {
      const response = await axiosInstance.get("/profile/me/appointments")
      return response.data
    } catch (error) {
      console.error("Error al obtener citas:", error)
      throw error
    }
  }

  // Obtener una cita espec√≠fica del cliente
  async getMyAppointment(appointmentId) {
    try {
      const response = await axiosInstance.get(`/profile/me/appointments/${appointmentId}`)
      return response.data
    } catch (error) {
      console.error("Error al obtener cita:", error)
      throw error
    }
  }

  // Cancelar una cita del cliente (solo si est√° "Programada")
  async cancelMyAppointment(appointmentId) {
    try {
      const response = await axiosInstance.patch(`/profile/me/appointments/${appointmentId}/cancel`)
      return response.data
    } catch (error) {
      console.error("Error al cancelar cita:", error)
      throw error
    }
  }

  // ============================================
  // üîπ 5. MIS RESE√ëAS
  // ============================================

  // Obtener todas las rese√±as de productos del cliente
  async getMyProductReviews() {
    try {
      const response = await axiosInstance.get("/profile/me/reviews/products")
      return response.data
    } catch (error) {
      console.error("Error al obtener rese√±as de productos:", error)
      throw error
    }
  }

  // Actualizar una rese√±a de producto del cliente
  async updateMyProductReview(reviewId, reviewData, photoFile = null) {
    try {
      const formData = new FormData()

      // Agregar datos de la rese√±a
      Object.keys(reviewData).forEach((key) => {
        if (reviewData[key] !== null && reviewData[key] !== undefined) {
          formData.append(key, reviewData[key])
        }
      })

      // Agregar foto si existe
      if (photoFile) {
        formData.append("foto", photoFile)
      }

      const response = await axiosInstance.put(`/profile/me/reviews/products/${reviewId}`, formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      })
      return response.data
    } catch (error) {
      console.error("Error al actualizar rese√±a de producto:", error)
      throw error
    }
  }

  // Eliminar una rese√±a de producto del cliente
  async deleteMyProductReview(reviewId) {
    try {
      const response = await axiosInstance.delete(`/profile/me/reviews/products/${reviewId}`)
      return response.data
    } catch (error) {
      console.error("Error al eliminar rese√±a de producto:", error)
      throw error
    }
  }

  // Obtener todas las rese√±as de servicios del cliente
  async getMyServiceReviews() {
    try {
      const response = await axiosInstance.get("/profile/me/reviews/services")
      return response.data
    } catch (error) {
      console.error("Error al obtener rese√±as de servicios:", error)
      throw error
    }
  }

  // Actualizar una rese√±a de servicio del cliente
  async updateMyServiceReview(reviewId, reviewData) {
    try {
      const response = await axiosInstance.put(`/profile/me/reviews/services/${reviewId}`, reviewData)
      return response.data
    } catch (error) {
      console.error("Error al actualizar rese√±a de servicio:", error)
      throw error
    }
  }

  // Eliminar una rese√±a de servicio del cliente
  async deleteMyServiceReview(reviewId) {
    try {
      const response = await axiosInstance.delete(`/profile/me/reviews/services/${reviewId}`)
      return response.data
    } catch (error) {
      console.error("Error al eliminar rese√±a de servicio:", error)
      throw error
    }
  }

  // Obtener todas las rese√±as generales del cliente
  async getMyGeneralReviews() {
    try {
      const response = await axiosInstance.get("/profile/me/reviews/general")
      return response.data
    } catch (error) {
      console.error("Error al obtener rese√±as generales:", error)
      throw error
    }
  }

  // Actualizar una rese√±a general del cliente
  async updateMyGeneralReview(reviewId, reviewData) {
    try {
      const response = await axiosInstance.put(`/profile/me/reviews/general/${reviewId}`, reviewData)
      return response.data
    } catch (error) {
      console.error("Error al actualizar rese√±a general:", error)
      throw error
    }
  }

  // Eliminar una rese√±a general del cliente
  async deleteMyGeneralReview(reviewId) {
    try {
      const response = await axiosInstance.delete(`/profile/me/reviews/general/${reviewId}`)
      return response.data
    } catch (error) {
      console.error("Error al eliminar rese√±a general:", error)
      throw error
    }
  }

  // ============================================
  // üîπ 6. M√âTODOS AUXILIARES
  // ============================================

  // Procesar m√∫ltiples tel√©fonos (separados por |)
  processPhoneNumbers(phoneString) {
    if (!phoneString) return []
    return phoneString.split("|").map((phone, index) => ({
      id: index + 1,
      numero: phone.trim(),
      principal: index === 0, // El primero es principal por defecto
    }))
  }

  // Convertir array de tel√©fonos a string para enviar a API
  formatPhonesForAPI(phonesArray) {
    return phonesArray.map((phone) => phone.numero).join("|")
  }

  // Procesar m√∫ltiples direcciones (separadas por |)
  processAddresses(addressString) {
    if (!addressString) return []
    return addressString.split("|").map((address, index) => ({
      id: index + 1,
      direccion: address.trim(),
      principal: index === 0, // La primera es principal por defecto
    }))
  }

  // Convertir array de direcciones a string para enviar a API
  formatAddressesForAPI(addressesArray) {
    return addressesArray.map((address) => address.direccion).join("|")
  }
}

// Exportar una instancia del servicio
const perfilClienteService = new PerfilClienteService()
export default perfilClienteService
