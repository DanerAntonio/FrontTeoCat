import axiosInstance from "../ConsumoAdmin/axios.js"

const CatalogoService = {
  // ============================================
  // üîπ SERVICIOS PARA CATEGOR√çAS
  // ============================================

  // Obtener todas las categor√≠as
  getAllCategorias: async () => {
    try {
      console.log("üîÑ Obteniendo categor√≠as...")
      const response = await axiosInstance.get("/productos/categorias")
      console.log("‚úÖ Categor√≠as obtenidas:", response.data)
      return response.data
    } catch (error) {
      console.error("‚ùå Error al obtener categor√≠as:", error)
      console.error("Response:", error.response?.data)
      console.error("Status:", error.response?.status)
      throw error
    }
  },

  // Buscar categor√≠as
  searchCategorias: async (term) => {
    try {
      const response = await axiosInstance.get(`/productos/categorias/search?term=${encodeURIComponent(term)}`)
      return response.data
    } catch (error) {
      console.error("Error al buscar categor√≠as:", error)
      throw error
    }
  },

  // Obtener categor√≠a por ID
  getCategoriaById: async (id) => {
    try {
      const response = await axiosInstance.get(`/productos/categorias/${id}`)
      return response.data
    } catch (error) {
      console.error("Error al obtener categor√≠a:", error)
      throw error
    }
  },

  // Obtener productos de una categor√≠a
  getProductosByCategoria: async (categoriaId) => {
    try {
      const response = await axiosInstance.get(`/productos/categorias/${categoriaId}/productos`)
      return response.data
    } catch (error) {
      console.error("Error al obtener productos de la categor√≠a:", error)
      throw error
    }
  },

  // ============================================
  // üîπ SERVICIOS PARA PRODUCTOS
  // ============================================

  // Obtener todos los productos
  getAllProductos: async () => {
    try {
      console.log("üîÑ Obteniendo productos...")
      const response = await axiosInstance.get("/productos/productos")
      console.log("‚úÖ Productos obtenidos:", response.data)
      return response.data
    } catch (error) {
      console.error("‚ùå Error al obtener productos:", error)
      console.error("Response:", error.response?.data)
      console.error("Status:", error.response?.status)
      throw error
    }
  },

  // Buscar productos
  searchProductos: async (term) => {
    try {
      const response = await axiosInstance.get(`/productos/productos/search?term=${encodeURIComponent(term)}`)
      return response.data
    } catch (error) {
      console.error("Error al buscar productos:", error)
      throw error
    }
  },

  // Obtener producto por ID
  getProductoById: async (id) => {
    try {
      const response = await axiosInstance.get(`/productos/productos/${id}`)
      return response.data
    } catch (error) {
      console.error("Error al obtener producto:", error)
      throw error
    }
  },

  // Obtener productos por categor√≠a (ruta alternativa)
  getProductosPorCategoria: async (categoriaId) => {
    try {
      const response = await axiosInstance.get(`/productos/productos/categoria/${categoriaId}`)
      return response.data
    } catch (error) {
      console.error("Error al obtener productos por categor√≠a:", error)
      throw error
    }
  },

  // Obtener producto por c√≥digo de barras
  getProductoByBarcode: async (codigo) => {
    try {
      const response = await axiosInstance.get(`/productos/productos/codigo/${codigo}`)
      return response.data
    } catch (error) {
      console.error("Error al obtener producto por c√≥digo:", error)
      throw error
    }
  },

  // Obtener variantes de un producto
  getVariantesProducto: async (productoId) => {
    try {
      const response = await axiosInstance.get(`/productos/productos/${productoId}/variantes`)
      return response.data
    } catch (error) {
      console.error("Error al obtener variantes del producto:", error)
      throw error
    }
  },

  // ============================================
  // üîπ UTILIDADES DE MAPEO
  // ============================================

  // Mapear producto de API a formato del componente
  mapProductoToComponent: (producto) => {
    console.log("üîÑ Mapeando producto:", producto)
    return {
      id: producto.IdProducto,
      name: producto.NombreProducto,
      category: producto.NombreCategoria || "Sin categor√≠a",
      price: Number.parseFloat(producto.Precio) || 0,
      rating: 4.5, // Valor por defecto ya que no viene en la API
      stock: producto.Stock || 0,
      image: producto.FotosProducto || "//vite.svg
",
      description: producto.Descripcion || "",
      barcode: producto.CodigoBarras,
      reference: producto.Referencia,
      unit: producto.UnidadMedida,
      origin: producto.Origen,
      status: producto.Estado,
      categoryId: producto.IdCategoriaDeProducto,
      isVariant: producto.EsVariante,
      baseProductId: producto.ProductoBaseId,
    }
  },

  // Mapear categor√≠a de API a formato del componente
  mapCategoriaToComponent: (categoria) => {
    console.log("üîÑ Mapeando categor√≠a:", categoria)
    return {
      id: categoria.IdCategoriaDeProducto,
      name: categoria.NombreCategoria,
      description: categoria.Descripcion || "",
      status: categoria.Estado,
    }
  },

  // ============================================
  // üîπ M√âTODOS COMBINADOS PARA COMPONENTES
  // ============================================

  // Obtener datos completos para el cat√°logo
  getCatalogoData: async () => {
    try {
      console.log("üîÑ Obteniendo datos completos del cat√°logo...")

      const [productos, categorias] = await Promise.all([
        CatalogoService.getAllProductos(),
        CatalogoService.getAllCategorias(),
      ])

      console.log("üì¶ Productos raw:", productos)
      console.log("üìÇ Categor√≠as raw:", categorias)

      const productosMapeados = productos.map(CatalogoService.mapProductoToComponent)
      const categoriasMapeadas = categorias.map(CatalogoService.mapCategoriaToComponent)

      console.log("‚úÖ Productos mapeados:", productosMapeados)
      console.log("‚úÖ Categor√≠as mapeadas:", categoriasMapeadas)

      return {
        productos: productosMapeados,
        categorias: categoriasMapeadas,
      }
    } catch (error) {
      console.error("‚ùå Error al obtener datos del cat√°logo:", error)
      throw error
    }
  },

  // Obtener producto completo con variantes para p√°gina de detalle
  getProductoCompleto: async (id) => {
    try {
      const [producto, variantes] = await Promise.all([
        CatalogoService.getProductoById(id),
        CatalogoService.getVariantesProducto(id).catch(() => []), // Si no tiene variantes, devolver array vac√≠o
      ])

      const productoMapeado = CatalogoService.mapProductoToComponent(producto)
      const variantesMapeadas = variantes.map(CatalogoService.mapProductoToComponent)

      return {
        ...productoMapeado,
        variants: variantesMapeadas,
        // Datos adicionales para la p√°gina de detalle
        features: ["Producto de alta calidad", "Garant√≠a incluida", "Env√≠o disponible"],
        specifications: {
          "C√≥digo de barras": producto.CodigoBarras || "N/A",
          Referencia: producto.Referencia || "N/A",
          "Unidad de medida": producto.UnidadMedida || "N/A",
          // ‚ùå CAMPOS REMOVIDOS: Origen, Stock, Stock disponible
        },
        images: producto.FotosProducto ? [producto.FotosProducto] : ["//vite.svg
"],
        reviews: [], // Por ahora vac√≠o, se puede implementar despu√©s
      }
    } catch (error) {
      console.error("Error al obtener producto completo:", error)
      throw error
    }
  },
}

export default CatalogoService
